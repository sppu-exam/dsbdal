Practical 4 ( DATA ANALYTICS I )

-------------------------------------------------

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

---------------------------------------------------------


boston = pd.read_csv("boston.csv") 

---------------------------------------------------


print("------------Dataframe Info------------------")
print(boston.info())
print("\n") 

--------------------------------------------------

print("----------Dataframe Describe------------")
print(boston.describe())
print("\n")

-------------------------------------------------

No need of below :

print("-----------Dataframe 5 Rows---------------")
print(boston.head())
print("\n"


print("-----------Dataframe Columns List----------------")
print(boston.columns)
print("\n"

--------------------------------------------------------------------


X = boston[['RM', 'LSTAT', 'PTRATIO']]
y = boston['MEDV']

--------------------------------------------------


print("-------------Splitting data into training and test sets-------------------")
# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)
print("\n")


------------------------------------------------------



for i, feature in enumerate(X.columns):
    plt.subplot(1, 3, i + 1)
    plt.scatter(X[feature], y, marker='o', s=5)
    plt.title(feature)
    plt.xlabel(feature)
    plt.ylabel('MEDV')

------------------------------------------------------


plt.tight_layout()
plt.show()

------------------------------------------------------

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

-------------------------------------------------------


print("-------------Visualization after fitting model---------------")
# Visualization after fitting the model
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual MEDV')
plt.ylabel('Predicted MEDV')
plt.title('Actual MEDV vs Predicted MEDV')
plt.show()
print("\n") 


-----------------------------------------------------


mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("-----------Evaluation Result----------------")
print("Mean Squared Error:", mse)
print("R^2 Score:", r2)
print('\n')


---------------------------------------------------
END



Explanation:- 

This code selects the 'RM' (average number of rooms per dwelling), 'LSTAT' (percentage of lower status of the population), and 'PTRATIO' (pupil-teacher ratio by town) columns as features and 'MEDV' (median value of owner-occupied homes) as the target variable. It then visualizes each feature against the target variable 'MEDV' before fitting the model and shows the predicted versus actual 'MEDV' values after fitting the model. Finally, it evaluates the model's performance using mean squared error and R-squared score.

In conclusion, this code loads the Boston housing dataset, explores it, splits it into training and test sets, trains a linear regression model, makes predictions on the test set, and evaluates the model performance using MSE and R^2 score. The visualizations before and after fitting the model provide insights into the data and model performance.








